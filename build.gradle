buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}

plugins {
    id 'org.spongepowered.plugin' version '0.9.0'
}

apply plugin: 'net.minecraftforge.gradle'

group = 'lelmc'
version = '1.3'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    maven { url 'https://jitpack.io' }
    ivy {
        setUrl('https://download.nodecdn.net/containers/reforged/server/release')
        metadataSources {
            artifact()
        }
        patternLayout {
            artifact('[revision]/[artifact].[ext]')
        }
    }
}

dependencies {
    compileOnly 'com.github.rojo8399:PlaceholderAPI:4.5.1'
    //implementation files("Pixelmon-1.12.2-8.3.3-server.jar")
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2855'
    compileOnly 'org.spongepowered:spongeforge:1.12.2-2838-7.4.0'
    implementation files("E:\\idea\\lib\\Pixelmon-1.12.2-8.4.3-server-deobf.jar")
    //annotationProcessor 'org.spongepowered:spongeforge:1.12.2-2838-7.3.0'
}

minecraft {
    mappings channel: 'stable', version: '39-1.12'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                echocommandmod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                echocommandmod {
                    source sourceSets.main
                }
            }
        }
    }
}

sponge.plugin.id = 'pokepmp'

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}
